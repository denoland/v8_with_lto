name: v8_with_lto

on: workflow_dispatch

permissions: write-all

jobs:
  build:
    name: ${{ matrix.config.variant }} ${{ matrix.config.target }}
    runs-on: ${{ matrix.config.os }}
    timeout-minutes: 180
    strategy:
      # Always run main branch builds to completion. This allows the cache to
      # stay mostly up-to-date in situations where a single job fails due to
      # e.g. a flaky test.
      # Don't fast-fail on tag build because publishing binaries shouldn't be
      # prevented if 'cargo publish' fails (which can be a false negative).
      fail-fast:
        ${{ (github.event_name == 'pull_request' || (github.ref !=
        'refs/heads/main' && !startsWith(github.ref, 'refs/tags/'))) &&
        !contains(github.event.pull_request.labels.*.name, 'no-fail-fast') }}
      matrix:
        config:
          #- os: macos-13
          #  target: x86_64-apple-darwin
          #  clang_base_path: '/usr'

          #- os: macos-14
          #  target: aarch64-apple-darwin
          #  clang_base_path: '/usr'

          - os: ${{ startsWith(github.repository, 'denoland/') && 'ubuntu-22.04-xl' || 'ubuntu-22.04' }}
            target: x86_64-unknown-linux-gnu
            clang_base_path: '/usr/lib/llvm-19'

          - os: ${{ startsWith(github.repository, 'denoland/') && 'windows-2022-xxl' || 'windows-2022' }}
            target: x86_64-pc-windows-msvc
            clang_base_path: 'C:/LLVM'

          - os: ${{ startsWith(github.repository, 'denoland/') && 'ubuntu-22.04-arm' || 'ubuntu-22.04-arm64' }}
            target: aarch64-unknown-linux-gnu
            clang_base_path: '/usr/lib/llvm-19'

    env:
      CLANG_BASE_PATH: ${{ matrix.config.clang_base_path }}
      V8_FROM_SOURCE: 1
      EXTRA_GN_ARGS: 'is_official_build=true chrome_pgo_phase=0 is_cfi=false clang_version=19'
      LIB_NAME: ${{ contains(matrix.config.target, 'windows') && 'rusty_v8' || 'librusty_v8' }}
      LIB_EXT: ${{ contains(matrix.config.target, 'windows') && 'lib' || 'a' }}
      RUSTFLAGS: -D warnings

    steps:
      - name: Configure git
        run: git config --global core.symlinks true

      - name: Clone repository
        uses: actions/checkout@v4
        with:
          repository: 'denoland/rusty_v8'
          ref: 'bb314fe659b11bfd68f3a6d07fc194d10b35eb8f'
          fetch-depth: 10
          submodules: recursive

      - name: Install rust
        uses: dsherret/rust-toolchain-file@v1

      - name: Install python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11.x

      - name: Write git_submodule_status.txt
        run: git submodule status --recursive > git_submodule_status.txt

      - name: Cache
        uses: actions/cache@v4
        with:
          # Note: rusty_v8 targets always get get rebuilt, and their outputs
          # ('librusty_v8.rlib', the whole 'gn_out' directory, etc.) can be
          # quite big, so we cache only those subdirectories of
          # target/{debug|release} that contain the build output for crates that
          # come from the registry. By additionally saving the sccache cache
          # directory it's still possible to build v8 fast.
          path: |-
            target/sccache
            target/*/.*
            target/*/build
            target/*/deps
          key:
            cargo-${{ matrix.config.target }}-${{ hashFiles('Cargo.lock', 'build.rs', 'git_submodule_status.txt') }}
          restore-keys:
            cargo-${{ matrix.config.target }}-

      - name: Install and start sccache
        shell: pwsh
        env:
          SCCACHE_DIR: ${{ github.workspace }}/target/sccache
          SCCACHE_CACHE_SIZE: 128M
          SCCACHE_IDLE_TIMEOUT: 0
        run: |
          $version = "v0.8.2"
          $platform =
            @{ "x86_64-apple-darwin"       = "x86_64-apple-darwin"
               "aarch64-apple-darwin"      = "aarch64-apple-darwin"
               "x86_64-unknown-linux-gnu"  = "x86_64-unknown-linux-musl"
               "aarch64-unknown-linux-gnu" = "aarch64-unknown-linux-musl"
               "x86_64-pc-windows-msvc"    = "x86_64-pc-windows-msvc"
             }['${{ matrix.config.target }}']
          $basename = "sccache-$version-$platform"
          $url = "https://github.com/mozilla/sccache/releases/download/$version/$basename.tar.gz"
          cd ~
          curl -LO $url
          tar -xzvf "$basename.tar.gz"
          . $basename/sccache --start-server
          echo "$(pwd)/$basename" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Ubuntu Setup
        if: startsWith(matrix.config.os, 'ubuntu')
        run: |
          echo "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-19 main" | sudo dd of=/etc/apt/sources.list.d/llvm-toolchain-jammy-19.list
          curl https://apt.llvm.org/llvm-snapshot.gpg.key | gpg --dearmor | sudo dd of=/etc/apt/trusted.gpg.d/llvm-snapshot.gpg
          sudo apt-get update
          sudo apt-get -qq remove 'clang-*'
          sudo apt-get install lld-19 clang-19 clang-tools-19 clang-tidy-19 clang-format-19 -y

      - name: Windows Setup
        if: startsWith(matrix.config.os, 'windows')
        run: |
          choco install llvm --version=19.1.3

          # space in "Program Files" messes up sccache, so lets use a symlink
          cmd /c mklink /d C:\LLVM 'C:\Program Files\LLVM'

          # file needs to exist for official windows build, just use dummy values.
          mkdir chrome
          echo "MAJOR=0`nMINOR=0`nBUILD=0`nPATCH=0`n" > chrome/VERSION


      - name: Build
        env:
          SCCACHE_IDLE_TIMEOUT: 0
        run: |
          curl -LO https://gist.githubusercontent.com/devsnek/d5bb78e2644a783c9d5e8344ae502658/raw/9d6e4809aeb656aa631c53f607b119eca628e846/compiler-rt-adjust-paths.patch
          patch -Np1 -i compiler-rt-adjust-paths.patch
          cargo build -vv --release --locked --target ${{ matrix.config.target }}

      - name: Prepare binary publish
        run: |
          gzip -9c target/${{ matrix.config.target }}/release/gn_out/obj/${{ env.LIB_NAME }}.${{ env.LIB_EXT }} > target/${{ env.LIB_NAME }}_lto_${{ matrix.config.target }}.${{ env.LIB_EXT }}.gz
          ls -l target/${{ env.LIB_NAME }}_lto_${{ matrix.config.target }}.${{ env.LIB_EXT }}.gz

          cp target/${{ matrix.config.target }}/release/gn_out/src_binding.rs target/src_binding_lto_${{ matrix.config.target }}.rs
          ls -l target/src_binding_lto_${{ matrix.config.target }}.rs

      - name: Binary publish
        uses: softprops/action-gh-release@v0.1.15
        if: github.repository == 'denoland/rusty_v8'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            target/${{ env.LIB_NAME }}_lto_${{ matrix.config.target }}.${{ env.LIB_EXT }}.gz
            target/src_binding_lto_${{ matrix.config.target }}.rs
